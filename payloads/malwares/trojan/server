#!/usr/bin/python3
from scapy.all import conf, get_if_addr
import socket, threading, os
from os import system
from colorama import Fore, init, Style
threads = []
clsinf = []
init()
exiting = False

def newclient():
    global exiting
    ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        ser.bind(('', 8050))
    except OSError:
        print('Address in use')
        os._exit(1)
    try:
        while not exiting:
            ser.listen(1)
            cli, addr = ser.accept()
            threads.append(threading.Thread(target=receiver, args=(cli, addr)))
            threads[-1].start()
            clsinf.append((cli, addr))
    except KeyboardInterrupt:
        ser.close()
        exiting = True
        exit()

def controler():
    global exiting
    selected_clients = clsinf[:]
    while not exiting:
        try:
            action = input(f'{Fore.GREEN}Action>>>')
        except KeyboardInterrupt:
            action = ''
            for cli in selected_clients:
                cli[0].close()
            exiting = True
        if action and action[0] == '#':
            if action == '#all':
                selected_clients = clsinf[:]
            elif action == '#clear':
                system('clear')
            elif action == '#help':
                print('''
                #help - help
                #all - select all clients
                #selected - show selected clients
                #(number) - select one client
                #list - list all clients''')
            elif action == '#list':
                if len(clsinf):
                    for cli in range(len(clsinf)):
                        print(f'{cli}-{clsinf[cli][1][0]}')
                else:
                    print('No clients connected')
            elif action == '#selected':
                if len(selected_clients):
                    for cli in range(len(selected_clients)):
                        print(f'{cli}-{selected_clients[cli][1][0]}')
                else:
                    print('No clients selected')
            else:
                try:
                    selected_clients = [clsinf[int(action[1:])]]
                except IndexError:
                    print(f'{Fore.RED}Index error, client not exists{Fore.RESET}')
                except ValueError:
                    print(f'{Fore.RED}Incorrect command{Fore.RESET}')
        else:
            for cli in selected_clients:
                cli[0].send(bytes(action.encode()))

def receiver(cli, addr):
    closed = False
    global exiting
    while not exiting and not closed:
        try:
            msg = cli.recv(1024)
            if str(msg)[1:] != "''":
                print(f'{Fore.LIGHTBLUE_EX}Client: {str(addr[0])}:{str(addr[1])} - Message: {str(msg)[1:]}{Fore.RESET}')
            else:
                try:
                    cli.send(b'Alive?')
                    closed = False
                except BrokenPipeError:
                    closed = True
                    clsinf.remove((cli, addr))
        except:
            pass

threads.append(threading.Thread(target=newclient))
threads[-1].start()
controler()

print('All connections closed')